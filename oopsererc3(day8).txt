'''
#1. Create BankAccount class, define name and account no as public
#attribute and mobile as protected attribute and balance as private
#attribute and try to access them to demonstrate data Hiding.


class bank:
    def __init__(self,name,acctno,mobile,balance):
        self.name=name
        self.acctno=acctno
        self._mobile=mobile
        self.__balance=balance

    def getmobile(self):
        return self._mobile

    def getbalance(self):
        return self.__balance

b= bank("sai",1233,909909,123)

print(b.name)
print(b.acctno)
print(b.getmobile())

print(b.getbalance())
'''



'''
#2. Write a Python program to check that a string contains only a certain
#set of characters (in this case a-z, A-Z and 0-9).


import re

def is_allowed(string):
    charre=re.compile(r'[^a-zA-Z0-9.]')
    string=charre.search(string)
    return not bool(string)

print(is_allowed("sdffdssfgeg"))
print(is_allowed("#!@#$CDSDVFV"))
'''

'''
#3. Write a Python program that matches a string that has an a followed by
#zero or more b's.
import re
def text_match(text):
    patterns='ab*?'
    if re.search(patterns,text):
        return "matched"
    else:
        return "not matched"

print(text_match("c"))
print(text_match("ac"))
print(text_match("abc"))
print(text_match("abbc"))
print(text_match("a"))
print(text_match("ed"))
'''



'''
#4. Write a Python program that matches a string that has an a
#followed by one or more b's.

import re
def text_match(text):
    patterns='ab+?'
    if re.search(patterns,text):
        return "matched"
    else:
        return "not matched"

print(text_match("c"))
print(text_match("ac"))
print(text_match("abc"))
print(text_match("abbc"))
'''
'''
#5. Write a Python program that matches a string that has an a
#followed by three 'b'


import re
def text_match(text):
    patterns='ab{3}?'
    if re.search(patterns,text):
        return "matched"
    else:
        return "not matched"

print(text_match("c"))
print(text_match("abc"))
print(text_match("abbbbbbbbc"))
print(text_match("abbbc"))

'''


'''

#6. Write a Python program to find sequences of lowercase
#letters joined with a underscore.
import re
def text_match(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("aab_cbbbc"))
print(text_match("aab_Abbbc"))
print(text_match("Aaab_abbbc"))

'''




'''

#7.Write a Python program to match a string that contains only
#upper and lowercase letters, numbers, and underscores.

import re
def text_match(text):
        patterns = '^[a-zA-Z0-9_]*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')

print(text_match("The  lazy dog."))
print(text_match("Python_Exercises_1"))

'''


'''
#8. Write a Python program to search the numbers (0-9) of length
#between 1 to 3 in a given string.
#"Exercises number 1, 12, 13, and 345 are important"


import re
results = re.findall(r"([0-9]{1,3})", "Exercises number 1, 12, 13 and 345 are important")
print("Number of length 1 to 3")
print(results)

'''




#9.Write a Python program to search some literals strings in a string.
#Sample text : 'The quick brown fox jumps over the lazy dog.'
#Searched words : 'fox', 'dog', 'horse'

import re
patterns = [ 'fox', 'dog', 'horse' ]
text = 'The quick brown fox jumps over the lazy dog.'
for pattern in patterns:
    print('Searching for "%s" in "%s" ->' % (pattern, text),)
    if re.search(pattern,  text):
        print('Matched!')
    else:
        print('Not Matched!')

#10. Write a Python program to convert a date of yyyy-mm-dd format to
#dd-mm-yyyy format.

import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
dt1 = "2026-01-02"
print("Original date in YYY-MM-DD Format: ",dt1)
print("New date in DD-MM-YYYY Format: ",change_date_format(dt1))
















